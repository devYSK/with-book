loki:
  enabled: true
  image:
    registry: docker.io
    repository: grafana/loki
    tag: 2.9.8
  config:
    analytics:
      reporting_enabled: false
  query_scheduler:
    max_outstanding_requests_per_tenant: 2048
  storage:
    type: filesystem

fluent-bit:
  enabled: false

promtail:
  enabled: true
  image:
    registry: docker.io
    repository: grafana/promtail
    tag: 2.9.8

grafana:
  enabled: true
  image:
    registry: docker.io
    repository: grafana/grafana-oss
    tag: 10.4.3
  adminUser: user
  service:
    type: ClusterIP
  grafana.ini:
    analytics:
      enabled: false
      reporting_enabled: false
      check_for_updates: false
      check_for_plugin_updates: false
      feedback_links_enabled: false
    feature_toggles:
      enable: correlations dataSourcePageHeader traceToMetrics scenes showDashboardValidationWarnings extraThemes lokiPredefinedOperations lokiFormatQuery exploreScrollableLogsContainer vizAndWidgetSplit logsExploreTableVisualisation metricsSummary featureToggleAdminPage httpSLOLevels enableNativeHTTPHistogram
    news:
      news_feed_enabled: false
    paths:
      temp_data_lifetime: 1h
    server:
      enable_gzip: true
    snapshots:
      enabled: false
      external_enabled: false
    users:
      default_theme: light
  ingress:
    enabled: false
  persistence:
    enabled: false
  # See: https://github.com/grafana/helm-charts/issues/1746
  rbac:
    pspEnabled: false
  testFramework:
    enabled: false
  sidecar:
    dashboards:
      enabled: true
      provider:
        allowUiUpdates: true
    datasources:
      enabled: false
  datasources:
    "datasources.yaml":
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          uid: prometheus
          access: proxy
          orgId: 1
          url: http://loki-stack-prometheus-server
          basicAuth: false
          isDefault: false
          version: 1
          editable: true
          jsonData:
            httpMethod: POST
            exemplarTraceIdDestinations:
              - name: traceID
                datasourceUid: tempo
        - name: Tempo
          type: tempo
          uid: tempo
          access: proxy
          orgId: 1
          url: http://tempo:3100
          basicAuth: false
          isDefault: false
          version: 1
          editable: true
          jsonData:
            httpMethod: GET
            tracesToMetrics:
              datasourceUid: prometheus
              tags: [ { key: 'service.name', value: 'application' }, { key: 'org' }, { key: 'method' }, { key: 'uri' }, { key: 'outcome' }, { key: 'status' }, { key: 'exception' } ]
              queries:
                - name: 'Throughput'
                  query: 'sum(rate(http_server_requests_seconds_count{$$__tags}[$$__rate_interval]))'
                - name: 'Latency'
                  query: 'histogram_quantile(1.00, sum(rate(http_server_requests_seconds_bucket{$$__tags}[$$__rate_interval])) by (le))'
            tracesToLogs:
              datasourceUid: 'loki'
              tags: [ 'instance', 'pod', 'namespace', 'hostname' ]
              mappedTags: [ { key: 'org' }, { key: 'service.name', value: 'application' }  ]
              mapTagNamesEnabled: true
              spanStartTimeShift: '1h'
              spanEndTimeShift: '1h'
              filterByTraceID: true
              filterBySpanID: false
              lokiSearch: true
            lokiSearch:
              datasourceUid: loki
            serviceMap:
              datasourceUid: prometheus
            search:
              hide: false
            nodeGraph:
              enabled: true
        - name: Loki
          type: loki
          uid: loki
          access: proxy
          url: http://loki-stack:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: true
          jsonData:
            derivedFields:
              - datasourceUid: tempo
                matcherRegex: \[.+,(.+?),
                name: TraceID
                url: $${__value.raw}

prometheus:
  enabled: true
  alertmanager:
    enabled: false
  configmapReload:
    alertmanager:
      enabled: false
  kube-state-metrics:
    metricLabelsAllowlist:
      - pods=[*]
      - deployments=[app.kubernetes.io/name,app.kubernetes.io/component,app.kubernetes.io/instance]
  pushgateway:
    enabled: false
  server:
    global:
      scrape_interval: 15s
    image:
      repository: quay.io/prometheus/prometheus
      tag: v2.52.0
    persistentVolume:
      enabled: false
